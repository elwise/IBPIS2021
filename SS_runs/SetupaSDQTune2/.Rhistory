sso.dqc <- sso.runc$derived_quants[1:219,] %>% rownames_to_column("rn") %>% separate(rn, into = c("Variable", "Yr"))
sso.dqc$Run <- "Setupc"
sso.2020 <- SS_read_summary(file = "D:/IPMA/SARDINE/WGHANSA2020/SS3/2020_Update/ss_summary.sso",verbose = TRUE)
sso.dq2020 <- sso.2020$derived_quants[1:219,] %>% rownames_to_column("rn") %>% separate(rn, into = c("Variable", "Yr"))
sso.dq2020$Run <- "Ass2020"
ssos <-
full_join(
sso.dq2020 %>%
pivot_longer(cols = c(Value, SE), names_to = "Type") %>%
select(Variable, Yr, Type, Ass2020 = "value"),
bind_rows(sso.dqa,sso.dqc) %>%
pivot_longer(cols = c(Value, SE), names_to = "Type"),
by = c("Variable", "Yr", "Type")
) %>%
mutate(delta = Ass2020 - value)
ssos %>%
filter(Yr %in% 1978:2020,Type == "Value") %>%
mutate(Yr = as.numeric(as.character(Yr))) %>%
ggplot(aes(x=Yr,y=delta,color=Run))+
geom_line()+
facet_wrap(Variable ~ .,scale="free_y",nrow=2)
ssos %>%
filter(Yr %in% 1978:2020,Type == "Value", Variable %in% c('SSB','Recr','F')) %>%
mutate(Yr = as.numeric(as.character(Yr))) %>%
ggplot(aes(x=Yr,y=delta,color=Run))+
geom_line()+
facet_wrap(Variable ~ .,scale="free_y",nrow=2)
ssos %>%
filter(Yr %in% 1978:2020,Type == "SE", Variable %in% c('SSB','Recr','F')) %>%
mutate(Yr = as.numeric(as.character(Yr))) %>%
ggplot(aes(x=Yr,y=delta,color=Run))+
geom_line()+
facet_wrap(Variable ~ .,scale="free_y",nrow=2)
full_join(
sso.dq2020 %>%
pivot_longer(cols = c(Value, SE), names_to = "Type") %>%
select(Variable, Yr, Type, Ass2020 = "value"),
bind_rows(sso.dqa,sso.dqc) %>%
pivot_longer(cols = c(Value, SE), names_to = "Type"),
by = c("Variable", "Yr", "Type")
)
full_join(
sso.dq2020 %>%
pivot_longer(cols = c(Value, SE), names_to = "Type") %>%
select(Variable, Yr, Type, Ass2020 = "value"),
bind_rows(ssos.dq2000,sso.dqa,sso.dqc) %>%
pivot_longer(cols = c(Value, SE), names_to = "Type"),
by = c("Variable", "Yr", "Type")
)
full_join(
sso.dq2020 %>%
pivot_longer(cols = c(Value, SE), names_to = "Type") %>%
select(Variable, Yr, Type, Ass2020 = "value"),
bind_rows(sso.dq2000,sso.dqa,sso.dqc) %>%
pivot_longer(cols = c(Value, SE), names_to = "Type"),
by = c("Variable", "Yr", "Type")
)
full_join(
sso.dq2020 %>%
pivot_longer(cols = c(Value, SE), names_to = "Type") %>%
select(Variable, Yr, Type, Ass2020 = "value"),
bind_rows(sso.dq2020,sso.dqa,sso.dqc) %>%
pivot_longer(cols = c(Value, SE), names_to = "Type"),
by = c("Variable", "Yr", "Type")
)
teste <- SS_output(dir = 'D:/IPMA/SARDINE/Interbenchmark2021/testes/teste',forecast=FALSE,ncols=62,verbose = TRUE, printstats = TRUE)
teste <- SS_output(dir = 'D:/IPMA/SARDINE/Interbenchmark2021/testes/teste',forecast=FALSE,ncols=62,verbose = TRUE, printstats = TRUE)
runa <- SS_output(dir = 'D:/IPMA/SARDINE/Interbenchmark2021/testes/Final_setupa',forecast=FALSE,ncols=62,verbose = TRUE, printstats = TRUE)
teste <- SS_output(dir = 'D:/IPMA/SARDINE/Interbenchmark2021/testes/teste',forecast=FALSE,ncols=62,verbose = TRUE, printstats = TRUE)
cpl <- list(runa,teste)
cpl.sum <- SSsummarize(biglist=cpl)
xx <- SStableComparisons(cpl.sum)
AIC <- c(Label="AIC", cpl.sum$npars*2+(2*cpl.sum$likelihoods[1,-ncol(cpl.sum$likelihoods)]))
rbind(xx,AIC)
sso.runa <- SS_read_summary(file = "D:/IPMA/SARDINE/Interbenchmark2021/testes/Final_setupa/ss_summary.sso",verbose = TRUE)
sso.dqa <- sso.runa$derived_quants[1:219,] %>% rownames_to_column("rn") %>% separate(rn, into = c("Variable", "Yr"))
sso.teste <- SS_read_summary(file = "D:/IPMA/SARDINE/Interbenchmark2021/testes/teste/ss_summary.sso",verbose = TRUE)
sso.dqteste <- sso.teste$derived_quants[1:219,] %>% rownames_to_column("rn") %>% separate(rn, into = c("Variable", "Yr"))
sso.dqa-sso.dqteste
sso.dqa
sso.dqa-sso.dqteste
sso.dqteste
sso.dqa$Value-sso.dqteste$Value
sso.dqa$SE-sso.dqteste$SE
teste <- SS_output(dir = 'D:/IPMA/SARDINE/Interbenchmark2021/testes/teste',forecast=FALSE,ncols=62,verbose = TRUE, printstats = TRUE)
cpl <- list(runa,teste)
cpl.sum <- SSsummarize(biglist=cpl)
AIC <- c(Label="AIC", cpl.sum$npars*2+(2*cpl.sum$likelihoods[1,-ncol(cpl.sum$likelihoods)]))
rbind(xx,AIC)
sso.teste <- SS_read_summary(file = "D:/IPMA/SARDINE/Interbenchmark2021/testes/teste/ss_summary.sso",verbose = TRUE)
sso.dqteste <- sso.teste$derived_quants[1:219,] %>% rownames_to_column("rn") %>% separate(rn, into = c("Variable", "Yr"))
sso.dqa$Value-sso.dqteste$Value
sso.dqa$SE-sso.dqteste$SE
teste <- SS_output(dir = 'D:/IPMA/SARDINE/Interbenchmark2021/testes/teste',forecast=FALSE,ncols=62,verbose = TRUE, printstats = TRUE)
cpl <- list(runa,teste)
cpl.sum <- SSsummarize(biglist=cpl)
xx <- SStableComparisons(cpl.sum)
AIC <- c(Label="AIC", cpl.sum$npars*2+(2*cpl.sum$likelihoods[1,-ncol(cpl.sum$likelihoods)]))
rbind(xx,AIC)
sso.teste <- SS_read_summary(file = "D:/IPMA/SARDINE/Interbenchmark2021/testes/teste/ss_summary.sso",verbose = TRUE)
sso.dqteste <- sso.teste$derived_quants[1:219,] %>% rownames_to_column("rn") %>% separate(rn, into = c("Variable", "Yr"))
sso.dqa$Value-sso.dqteste$Value
runa <- SS_output(dir = 'D:/IPMA/SARDINE/Interbenchmark2021/testes/Final_setupa',forecast=FALSE,ncols=62,verbose = TRUE, printstats = TRUE)
run4 <- SS_output(dir = 'D:/IPMA/SARDINE/Interbenchmark2021/testes/#4',forecast=FALSE,ncols=62,verbose = TRUE, printstats = TRUE)
cpl <- c(runa,run4)
cpl.sum <- SSsummarize(biglist=cpl)
xx <- SStableComparisons(cpl.sum)
cpl <- list(runa,run4)
xx <- SStableComparisons(cpl.sum)
cpl.sum <- SSsummarize(biglist=cpl)
xx <- SStableComparisons(cpl.sum)
AIC <- c(Label="AIC", cpl.sum$npars*2+(2*cpl.sum$likelihoods[1,-ncol(cpl.sum$likelihoods)]))
rbind(xx,AIC)
teste <- SS_output(dir = 'D:/IPMA/SARDINE/Interbenchmark2021/testes/teste',forecast=FALSE,ncols=62,verbose = TRUE, printstats = TRUE)
cpl <- list(runa,teste)
cpl.sum <- SSsummarize(biglist=cpl)
xx <- SStableComparisons(cpl.sum)
AIC <- c(Label="AIC", cpl.sum$npars*2+(2*cpl.sum$likelihoods[1,-ncol(cpl.sum$likelihoods)]))
rbind(xx,AIC)
sso.teste <- SS_read_summary(file = "D:/IPMA/SARDINE/Interbenchmark2021/testes/teste/ss_summary.sso",verbose = TRUE)
sso.dqteste <- sso.teste$derived_quants[1:219,] %>% rownames_to_column("rn") %>% separate(rn, into = c("Variable", "Yr"))
sso.dqa$Value-sso.dqteste$Value
teste <- SS_output(dir = 'D:/IPMA/SARDINE/Interbenchmark2021/testes/teste',forecast=FALSE,ncols=62,verbose = TRUE, printstats = TRUE)
cpl <- list(runa,teste)
cpl.sum <- SSsummarize(biglist=cpl)
AIC <- c(Label="AIC", cpl.sum$npars*2+(2*cpl.sum$likelihoods[1,-ncol(cpl.sum$likelihoods)]))
rbind(xx,AIC)
sso.teste <- SS_read_summary(file = "D:/IPMA/SARDINE/Interbenchmark2021/testes/teste/ss_summary.sso",verbose = TRUE)
sso.dqteste <- sso.teste$derived_quants[1:219,] %>% rownames_to_column("rn") %>% separate(rn, into = c("Variable", "Yr"))
sso.dqa$Value-sso.dqteste$Value
sso.dqa$SE-sso.dqteste$SE
teste <- SS_output(dir = 'D:/IPMA/SARDINE/Interbenchmark2021/testes/teste',forecast=FALSE,ncols=62,verbose = TRUE, printstats = TRUE)
cpl <- list(runa,teste)
cpl.sum <- SSsummarize(biglist=cpl)
AIC <- c(Label="AIC", cpl.sum$npars*2+(2*cpl.sum$likelihoods[1,-ncol(cpl.sum$likelihoods)]))
rbind(xx,AIC)
sso.teste <- SS_read_summary(file = "D:/IPMA/SARDINE/Interbenchmark2021/testes/teste/ss_summary.sso",verbose = TRUE)
sso.dqteste <- sso.teste$derived_quants[1:219,] %>% rownames_to_column("rn") %>% separate(rn, into = c("Variable", "Yr"))
sso.dqa$Value-sso.dqteste$Value
sso.dqa$SE-sso.dqteste$SE
teste <- SS_output(dir = 'D:/IPMA/SARDINE/Interbenchmark2021/testes/teste',forecast=FALSE,ncols=62,verbose = TRUE, printstats = TRUE)
cpl <- list(runa,teste)
cpl.sum <- SSsummarize(biglist=cpl)
AIC <- c(Label="AIC", cpl.sum$npars*2+(2*cpl.sum$likelihoods[1,-ncol(cpl.sum$likelihoods)]))
rbind(xx,AIC)
sso.teste <- SS_read_summary(file = "D:/IPMA/SARDINE/Interbenchmark2021/testes/teste/ss_summary.sso",verbose = TRUE)
sso.dqteste <- sso.teste$derived_quants[1:219,] %>% rownames_to_column("rn") %>% separate(rn, into = c("Variable", "Yr"))
sso.dqa$Value-sso.dqteste$Value
sso.dqa$SE-sso.dqteste$SE
runc <- SS_output(dir = 'D:/IPMA/SARDINE/Interbenchmark2021/testes/Final_setupc',forecast=FALSE,ncols=62,verbose = TRUE, printstats = TRUE)
teste <- SS_output(dir = 'D:/IPMA/SARDINE/Interbenchmark2021/testes/teste',forecast=FALSE,ncols=62,verbose = TRUE, printstats = TRUE)
cpl <- list(runc,teste)
cpl.sum <- SSsummarize(biglist=cpl)
AIC <- c(Label="AIC", cpl.sum$npars*2+(2*cpl.sum$likelihoods[1,-ncol(cpl.sum$likelihoods)]))
rbind(xx,AIC)
sso.teste <- SS_read_summary(file = "D:/IPMA/SARDINE/Interbenchmark2021/testes/teste/ss_summary.sso",verbose = TRUE)
sso.dqteste <- sso.teste$derived_quants[1:219,] %>% rownames_to_column("rn") %>% separate(rn, into = c("Variable", "Yr"))
sso.dqa$Value-sso.dqteste$Value
sso.dqa$SE-sso.dqteste$SE
SSplotComparisons(summaryoutput=cpl.sum,subplots = c(2,8,10,12),xlim=c(1978,2021))
SSplotComparisons(summaryoutput=cpl.sum,subplots = c(13),indexfleets = c(2),xlim=c(1978,2021))
SSplotComparisons(summaryoutput=cpl.sum,subplots = c(13),indexfleets = c(3),xlim=c(1978,2021))
SSplotComparisons(summaryoutput=cpl.sum,subplots = c(13),indexfleets = c(4),xlim=c(1978,2021))
runc$maximum_gradient_component
teste$maximum_gradient_component
runa <- SS_output(dir = 'D:/IPMA/SARDINE/Interbenchmark2021/testes/Final_setupa',forecast=FALSE,ncols=62,verbose = TRUE, printstats = TRUE)
runc <- SS_output(dir = 'D:/IPMA/SARDINE/Interbenchmark2021/testes/Final_setupc',forecast=FALSE,ncols=62,verbose = TRUE, printstats = TRUE)
# compare models
cpl <- list(run2020,runa,runa.DEPM,runc,runc.DEPM)
cpl.sum <- SSsummarize(biglist=cpl)
xx <- SStableComparisons(cpl.sum)
AIC <- c(Label="AIC", cpl.sum$npars*2+(2*cpl.sum$likelihoods[1,-ncol(cpl.sum$likelihoods)]))
rbind(xx,AIC)
sso.runa <- SS_read_summary(file = "D:/IPMA/SARDINE/Interbenchmark2021/testes/Final_setupa/ss_summary.sso",verbose = TRUE)
sso.dqa <- sso.runa$derived_quants[1:219,] %>% rownames_to_column("rn") %>% separate(rn, into = c("Variable", "Yr"))
sso.dqa$Run <- "Setupa"
sso.runc <- SS_read_summary(file = "D:/IPMA/SARDINE/Interbenchmark2021/testes/Final_setupc/ss_summary.sso",verbose = TRUE)
sso.dqc <- sso.runc$derived_quants[1:219,] %>% rownames_to_column("rn") %>% separate(rn, into = c("Variable", "Yr"))
sso.dqc$Run <- "Setupc"
sso.2020 <- SS_read_summary(file = "D:/IPMA/SARDINE/WGHANSA2020/SS3/2020_Update/ss_summary.sso",verbose = TRUE)
sso.dq2020 <- sso.2020$derived_quants[1:219,] %>% rownames_to_column("rn") %>% separate(rn, into = c("Variable", "Yr"))
sso.dq2020$Run <- "Ass2020"
ssos <-
full_join(
sso.dq2020 %>%
pivot_longer(cols = c(Value, SE), names_to = "Type") %>%
select(Variable, Yr, Type, Ass2020 = "value"),
bind_rows(sso.dq2020,sso.dqa,sso.dqc) %>%
pivot_longer(cols = c(Value, SE), names_to = "Type"),
by = c("Variable", "Yr", "Type")
) %>%
mutate(delta = Ass2020 - value)
sso.dqa$Value-sso.dqc$Value
sso.dqa$SE-sso.dqc$SE
ssos <-
full_join(
sso.dq2020 %>%
pivot_longer(cols = c(Value, SE), names_to = "Type") %>%
select(Variable, Yr, Type, Ass2020 = "value"),
bind_rows(sso.dq2020,sso.dqa,sso.dqc) %>%
pivot_longer(cols = c(Value, SE), names_to = "Type"),
by = c("Variable", "Yr", "Type")
) %>%
mutate(delta = Ass2020 - value)
ssos
ssos %>% group_by(Variable, Type, Run)%>% summarise (mean= mean(value), sd=sd(value))
ssos %>% group_by(Variable, Type, Run)%>% summarise (mean= mean(value), sd=sd(value))%>%filter(Variable %in% c("SSB","Recr","F"))
SS_plots(runa)
SS_plots(runc)
teste <- SS_output(dir = 'D:/IPMA/SARDINE/Interbenchmark2021/testes/teste',forecast=FALSE,ncols=62,verbose = TRUE, printstats = TRUE)
cpl <- list(runc,teste)
cpl.sum <- SSsummarize(biglist=cpl)
AIC <- c(Label="AIC", cpl.sum$npars*2+(2*cpl.sum$likelihoods[1,-ncol(cpl.sum$likelihoods)]))
rbind(xx,AIC)
sso.teste <- SS_read_summary(file = "D:/IPMA/SARDINE/Interbenchmark2021/testes/teste/ss_summary.sso",verbose = TRUE)
sso.dqteste <- sso.teste$derived_quants[1:219,] %>% rownames_to_column("rn") %>% separate(rn, into = c("Variable", "Yr"))
sso.dqa$Value-sso.dqteste$Value
sso.dqa$SE-sso.dqteste$SE
teste <- SS_output(dir = 'D:/IPMA/SARDINE/Interbenchmark2021/testes/teste',forecast=FALSE,ncols=62,verbose = TRUE, printstats = TRUE)
cpl <- list(runc,teste)
cpl.sum <- SSsummarize(biglist=cpl)
AIC <- c(Label="AIC", cpl.sum$npars*2+(2*cpl.sum$likelihoods[1,-ncol(cpl.sum$likelihoods)]))
rbind(xx,AIC)
AIC
teste <- SS_output(dir = 'D:/IPMA/SARDINE/Interbenchmark2021/testes/teste',forecast=FALSE,ncols=62,verbose = TRUE, printstats = TRUE)
cpl <- list(runc,teste)
cpl.sum <- SSsummarize(biglist=cpl)
AIC <- c(Label="AIC", cpl.sum$npars*2+(2*cpl.sum$likelihoods[1,-ncol(cpl.sum$likelihoods)]))
rbind(xx,AIC)
xx
xx <- SStableComparisons(cpl.sum)
AIC <- c(Label="AIC", cpl.sum$npars*2+(2*cpl.sum$likelihoods[1,-ncol(cpl.sum$likelihoods)]))
rbind(xx,AIC)
teste <- SS_output(dir = 'D:/IPMA/SARDINE/Interbenchmark2021/testes/teste',forecast=FALSE,ncols=62,verbose = TRUE, printstats = TRUE)
cpl <- list(runc,teste)
cpl.sum <- SSsummarize(biglist=cpl)
xx <- SStableComparisons(cpl.sum)
AIC <- c(Label="AIC", cpl.sum$npars*2+(2*cpl.sum$likelihoods[1,-ncol(cpl.sum$likelihoods)]))
rbind(xx,AIC)
sso.teste <- SS_read_summary(file = "D:/IPMA/SARDINE/Interbenchmark2021/testes/teste/ss_summary.sso",verbose = TRUE)
sso.dqteste <- sso.teste$derived_quants[1:219,] %>% rownames_to_column("rn") %>% separate(rn, into = c("Variable", "Yr"))
sso.dqa$Value-sso.dqteste$Value
sso.dqa$SE-sso.dqteste$SE
SS_plots(teste)
SS_plots(teste)
teste <- SS_output(dir = 'D:/IPMA/SARDINE/Interbenchmark2021/testes/teste',forecast=FALSE,ncols=62,verbose = TRUE, printstats = TRUE)
cpl <- list(runc,teste)
cpl.sum <- SSsummarize(biglist=cpl)
xx <- SStableComparisons(cpl.sum)
AIC <- c(Label="AIC", cpl.sum$npars*2+(2*cpl.sum$likelihoods[1,-ncol(cpl.sum$likelihoods)]))
rbind(xx,AIC)
sso.teste <- SS_read_summary(file = "D:/IPMA/SARDINE/Interbenchmark2021/testes/teste/ss_summary.sso",verbose = TRUE)
sso.dqteste <- sso.teste$derived_quants[1:219,] %>% rownames_to_column("rn") %>% separate(rn, into = c("Variable", "Yr"))
sso.dqa$Value-sso.dqteste$Value
sso.dqa$SE-sso.dqteste$SE
SS_plots(teste)
teste <- SS_output(dir = 'D:/IPMA/SARDINE/Interbenchmark2021/testes/teste',forecast=FALSE,ncols=62,verbose = TRUE, printstats = TRUE)
cpl <- list(runc,teste)
cpl.sum <- SSsummarize(biglist=cpl)
xx <- SStableComparisons(cpl.sum)
AIC <- c(Label="AIC", cpl.sum$npars*2+(2*cpl.sum$likelihoods[1,-ncol(cpl.sum$likelihoods)]))
rbind(xx,AIC)
SS_plots(teste)
runc$maximum_gradient_component
teste$maximum_gradient_component
SSplotComparisons(cpl.sum)
SSplotComparisons(summaryoutput=cpl.sum,subplots = c(2,8,10,12),xlim=c(1978,2021))
dev.off()
SSplotComparisons(summaryoutput=cpl.sum,subplots = c(2,8,10,12),xlim=c(1978,2021))
cpl <- list(run2020,runc,teste)
cpl.sum <- SSsummarize(biglist=cpl)
dev.off()
SSplotComparisons(summaryoutput=cpl.sum,subplots = c(2,8,10,12),xlim=c(1978,2021))
# compare models
cpl <- list(run2020,runa,runa.DEPM,runc,runc.DEPM)
cpl.sum <- SSsummarize(biglist=cpl)
SSplotComparisons(summaryoutput=cpl.sum,subplots = c(2,8,10,12),xlim=c(1978,2021))
xx <- SStableComparisons(cpl.sum)
AIC <- c(Label="AIC", cpl.sum$npars*2+(2*cpl.sum$likelihoods[1,-ncol(cpl.sum$likelihoods)]))
rbind(xx,AIC)
teste <- SS_output(dir = 'D:/IPMA/SARDINE/Interbenchmark2021/testes/teste',forecast=FALSE,ncols=62,verbose = TRUE, printstats = TRUE)
cpl <- list(runa,runc,teste)
cpl.sum <- SSsummarize(biglist=cpl)
xx <- SStableComparisons(cpl.sum)
AIC <- c(Label="AIC", cpl.sum$npars*2+(2*cpl.sum$likelihoods[1,-ncol(cpl.sum$likelihoods)]))
rbind(xx,AIC)
SS_plots(teste)
dev.off()
dev.off()
SSplotComparisons(summaryoutput=cpl.sum,subplots = c(2,8,10,12),xlim=c(1978,2021))
# compare models
cpl <- list(run2020,runa,runa.DEPM,runc,runc.DEPM)
cpl.sum <- SSsummarize(biglist=cpl)
SSplotComparisons(summaryoutput=cpl.sum,subplots = c(2,8,10,12),xlim=c(1978,2021))
cpl <- list(runa,runc)
cpl.sum <- SSsummarize(biglist=cpl)
xx <- SStableComparisons(cpl.sum)
AIC <- c(Label="AIC", cpl.sum$npars*2+(2*cpl.sum$likelihoods[1,-ncol(cpl.sum$likelihoods)]))
rbind(xx,AIC)
dev.off()
SSplotComparisons(summaryoutput=cpl.sum,subplots = c(2,8,10,12),xlim=c(1978,2021))
SSplotComparisons(summaryoutput=cpl.sum,subplots = c(13),indexfleets = c(2),xlim=c(1978,2021))
SSplotComparisons(summaryoutput=cpl.sum,subplots = c(13),indexfleets = c(3),xlim=c(1978,2021))
SSplotComparisons(summaryoutput=cpl.sum,subplots = c(13),indexfleets = c(4),xlim=c(1978,2021))
SSplotComparisons(summaryoutput=cpl.sum,subplots = c(13),indexfleets = c(2),xlim=c(1978,2021))
SSplotComparisons(summaryoutput=cpl.sum,subplots = c(13),indexfleets = c(3),xlim=c(1978,2021))
cpl <- list(runc,teste)
cpl.sum <- SSsummarize(biglist=cpl)
xx <- SStableComparisons(cpl.sum)
AIC <- c(Label="AIC", cpl.sum$npars*2+(2*cpl.sum$likelihoods[1,-ncol(cpl.sum$likelihoods)]))
rbind(xx,AIC)
cpl <- list(runa,teste)
cpl.sum <- SSsummarize(biglist=cpl)
xx <- SStableComparisons(cpl.sum)
AIC <- c(Label="AIC", cpl.sum$npars*2+(2*cpl.sum$likelihoods[1,-ncol(cpl.sum$likelihoods)]))
rbind(xx,AIC)
SSplotComparisons(summaryoutput=cpl.sum,subplots = c(2,8,10,12),xlim=c(1978,2021))
SSplotComparisons(summaryoutput=cpl.sum,subplots = c(13),indexfleets = c(2),xlim=c(1978,2021))
rm(list=ls())
setwd('D:/ICES/IBPIS2021/SS_runs/SetupaSDQTune2')
load("pil.stock.RData")
library(FLCore)
library(msy)
setwd("D:/IPMA/SARDINE/CAS/2020/regimeProductividade")
load("pil.stock.RData")
mat(pil) <- c(0,1,1,1,1,1,1)
#Calculate for the Short Series with fixed Blim
### Get Blim and Bloss
stk <- window(pil, start=2006, end=2019)
# set age0 stock.wt close to 0 needed to get things running
stock.wt(stk)[1] <- rep (0.00000001, ncol(stock.wt(stk)))
Blim <- 196334
Bpa <- 252523
sigmaB <- 0.153
### Define new stock recruit relationships
## determine segreg model with Blim breakpoint and (roughly) geomean rec above this
SegregBlim  <- function(ab, ssb) log(ifelse(ssb >= Blim, ab$a * Blim, ab$a * ssb))
noSims <- 1000
### Create EQSIM SRR fits
FIT_segregBlim <- eqsr_fit(stk,nsamp=noSims, models = "SegregBlim")
stk
set.seed(1919)
sim_06_19_fixedBlim <- eqsim_run (FIT_segregBlim, # choose SR-fit
bio.years = c(2014, 2019), # years to generate noise in mat,M and wi
bio.const = FALSE,  # average maturity used (TRUE)
sel.years = c(2014, 2019), # noise in selection at age
sel.const = FALSE, # average selection used (TRUE)
Fscan = seq(0, 2, by = 0.01), # range of F values tested
Blim = Blim , # set BRP?s
Bpa = Bpa, # set BRP?s
Nrun = 200)
rm(list=ls())
#==============================================================================
# WORKING DIRECTORY                                                        ----
#==============================================================================
setwd('D:/ICES/IBPIS2021/SS_runs/SetupaSDQTune2')
load("pil.stock.RData")
#==============================================================================
# LOAD LIBRARIES                                                           ----
#==============================================================================
library(FLCore)
library(msy)
setwd('D:/ICES/IBPIS2021/SS_runs/SetupaSDQTune2')
setwd('D:/ICES/IBPIS2021/SS_runs/SetupaSDQTune2')
load("pil.stock.RData")
pil <- pil.stock
mat(pil) <- c(0,1,1,1,1,1,1)
Blim <- 196334
Bpa <- 252523
noSims <- 1000
#Calculate for the Short Series with fixed Blim
### Get Blim and Bloss
#stk <- window(pil, start=2006, end=2020)
stk <- window(pil, start=2006, end=2019)
# set age0 stock.wt close to 0 needed to get things running
stock.wt(stk)[1] <- rep (0.00000001, ncol(stock.wt(stk)))
### Define new stock recruit relationships
## determine segreg model with Blim breakpoint and (roughly) geomean rec above this
SegregBlim  <- function(ab, ssb) log(ifelse(ssb >= Blim, ab$a * Blim, ab$a * ssb))
### Create EQSIM SRR fits
FIT_segreg2020 <- eqsr_fit(stk,nsamp=noSims, models = "SegregBlim") #with Blim fixed
eqsr_plot(FIT_segreg2020)
FIT_segreg2020$sr.det
27068.2/160369
#sigmaB <- 0.163
sigmaB <- 0.169
#Calculate for the Short Series with fixed Blim
### Get Blim and Bloss
#stk <- window(pil, start=2006, end=2020)
stk <- window(pil, start=2006, end=2019)
# set age0 stock.wt close to 0 needed to get things running
stock.wt(stk)[1] <- rep (0.00000001, ncol(stock.wt(stk)))
### Define new stock recruit relationships
## determine segreg model with Blim breakpoint and (roughly) geomean rec above this
SegregBlim  <- function(ab, ssb) log(ifelse(ssb >= Blim, ab$a * Blim, ab$a * ssb))
FIT_segreg2020$sr.det
set.seed(1919)
sim_06_20_fixedBlim <- eqsim_run (FIT_segreg2020, # choose SR-fit
bio.years = c(2014, 2019), # years to generate noise in mat,M and wi
bio.const = FALSE,  # average maturity used (TRUE)
sel.years = c(2014, 2019), # noise in selection at age
sel.const = FALSE, # average selection used (TRUE)
Fscan = seq(0, 2, by = 0.01), # range of F values tested
Blim = Blim , # set BRP?s
Bpa = Bpa, # set BRP?s
Nrun = 200)
set.seed(1919)
sim_06_20_cv_fixedBlim <- eqsim_run (FIT_segreg2020, # choose SR-fit
bio.years = c(2014, 2019), # years to generate noise in mat,M and wi
bio.const = FALSE,  # average maturity used (TRUE)
sel.years = c(2014, 2019), # noise in selection at age
sel.const = FALSE, # average selection used (TRUE)
Fscan = seq(0, 2, by = 0.01), # range of F values tested
Blim = Blim , # set BRP?s
Bpa = Bpa, # set BRP?s
Nrun = 200,
Fcv = 0.058 , # F CV assessment error last year
Fphi = 0.423 , # autocorrelation in F assessment error; default value
SSBcv = sigmaB)
set.seed(1919)
sim_06_20_trigger_fixedBlim <- eqsim_run (FIT_segreg2020, # choose SR-fit
bio.years = c(2014, 2019), # years to generate noise in mat,M and wi
bio.const = FALSE,  # average maturity used (TRUE)
sel.years = c(2014, 2019), # noise in selection at age
sel.const = FALSE, # average selection used (TRUE)
Fscan = seq(0, 2, by = 0.01), # range of F values tested
Blim = Blim , # set BRP?s
Bpa = Bpa, # set BRP?s
Nrun = 200,
Fcv = 0.058 , # F CV assessment error last year
Fphi = 0.423 , # autocorrelation in F assessment error; default value
SSBcv = sigmaB,
Btrigger = Bpa # apply HCR (to check precautionarity)
)
t(sim_06_20_fixedBlim$Refs)
t(sim_06_20_cv_fixedBlim$Refs)
t(sim_06_20_trigger_fixedBlim$Refs)
t(sim_06_20_trigger_fixedBlim$refs_interval)
rm(list=ls())
rm(list=ls())
setwd("D:/IPMA/SARDINE/WGHANSA2021/STF")
load("D:/IPMA/SARDINE/WGHANSA2021/STF/pil.stock2021.RData")
mat(pil) <- c(0,1,1,1,1,1,1)
stk <- window(pil, start=2006, end=2020)
# set age0 stock.wt close to 0 needed to get things running
stock.wt(stk)[1] <- rep (0.00000001, ncol(stock.wt(stk)))
416992 53392.5
53392.5/416992
sigmaB <- 0.128
noSims <- 1000
set.seed(1919)
FIT_segreg <- eqsr_fit(stk,nsamp=noSims,models = "Segreg")
FIT_segreg
FIT_segreg$sr.det
stk <- window(pil, start=1978, end=2020)
# set age0 stock.wt close to 0 needed to get things running
stock.wt(stk)[1] <- rep (0.00000001, ncol(stock.wt(stk)))
FIT_segreg <- eqsr_fit(stk,nsamp=noSims,models = "Segreg")
FIT_segreg$sr.det
stock.pil <- readFLSss3(system.file("ext-data", "pil", package="ss3om"),
range = c(minfbar = 2, maxfbar = 5))
devtools::install_github('iagomosqueira/ss3om')
stock.pil <- ss3om::readFLSss3(system.file("ext-data", "pil", package="ss3om"),
range = c(minfbar = 2, maxfbar = 5))
??readFLSss3
library(ss3om)
??readFLSss3
?readFLSss3
system.file("ext-data", "pil", package="ss3om")
stock.pil <- ss3om::readFLSss3(dir='D:/ICES/IBPIS2021/SS_runs/SetupaSDQTune2',
range = c(minfbar = 2, maxfbar = 5))
stock.pil
catch(stock.pil)
setwd('D:/ICES/IBPIS2021/SS_runs/SetupaSDQTune2')
load("pil.stock.RData")
catch(pil.stock)
catch(stock.pil)
m(pil.stock)
m(stock.pil)
pil.stock@catch.n
stock.pil@catch.n
pil.stock@catch.wt
stock.pil@catch.wt
stock.pil@discards
stock.pil@discards.n
stock.pil@discards.wt
pil.stock@discards.wt
stock.pil@landings.n[,ac(2015:2020)]
pil.stock@landings.n[,ac(2015:2020)]
pil.stock@landings.wt[,ac(2015:2020)]
stock.pil@landings.wt[,ac(2015:2020)]
stock.pil@stock.n
pil.stock@stock.n
pil.stock@mat
stock.pil@mat
stock.pil@harvest
pil.stock@harvest
pil.stock@harvest.spwn
stock.pil@harvest.spwn
stock.pil@m.spwn
6*4*7
set.seed(1919)
sim_06_19_fixedBlim <- eqsim_run (FIT_segregBlim, # choose SR-fit
bio.years = c(2014, 2019), # years to generate noise in mat,M and wi
bio.const = FALSE,  # average maturity used (TRUE)
sel.years = c(2014, 2019), # noise in selection at age
sel.const = FALSE, # average selection used (TRUE)
Fscan = seq(0, 2, by = 0.01), # range of F values tested
Blim = Blim , # set BRP?s
Bpa = Bpa, # set BRP?s
Nrun = 200)
set.seed(1919)
