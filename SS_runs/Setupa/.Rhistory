load("pil.stock.RData")
mat(pil) <- c(0,1,1,1,1,1,1)
longSeries <- window(pil, start=1993,end=2019)
shortSeries <- window(pil, start=2006, end=2019)
f.fit <- function(stk,model,title){
# set age0 stock.wt close to 0 needed to get things running
stock.wt(stk)[1] <- rep (0.00000001, ncol(stock.wt(stk)))
set.seed(1919)
fit <- eqsr_fit(stk,nsamp=1000,models=c(paste0(model)))
#  setwd("~/Documents/IPMA/SARDINE/ADVICE_MP/BRP | Revision")
## -- plot of S-R fit
png(paste0('fit',model,range(stk)["minyear"],'-',range(stk)["maxyear"],'.png'))
eqsr_plot(fit)
text(fit$rby$ssb,fit$rby$rec, labels=fit$rby$year,cex= 0.5,pos=3)
title(sub=paste0(title))
dev.off()
return(fit)
}
fCombLong <- f.fit(longSeries,c("Bevholt","Ricker","Segreg"),"Weigthed combination")
fSegregLong <- f.fit(longSeries,c("Segreg"),"Hockey-stick")
fCombShort <- f.fit(shortSeries,c("Bevholt","Ricker","Segreg"),"Weigthed combination")
fSegregShort <- f.fit(shortSeries,c("Segreg"),"Hockey-stick")
fRickerShort <- f.fit(shortSeries,c("Ricker"),"Ricker")
paste0(round(quantile(fit15Segreg$sr.sto$b.b,0.025),0),' - ',round(quantile(fit15Segreg$sr.sto$b.b,0.975),0))
setwd('D:/ICES/IBPIS2021/SS_runs/Setupa')
load("pil.stock.RData")
#==============================================================================
# Estimate Reference points                                                ----
#==============================================================================
pil <- pil.stock
mat(pil) <- c(0,1,1,1,1,1,1)
#Calculate for the Short Series with fixed Blim
### Get Blim and Bloss
stk <- window(pil, start=2006, end=2020)
# set age0 stock.wt close to 0 needed to get things running
stock.wt(stk)[1] <- rep (0.00000001, ncol(stock.wt(stk)))
stk2 <- window(pil, start=1993, end=2020)
f.fit <- function(stk,model,title){
# set age0 stock.wt close to 0 needed to get things running
stock.wt(stk)[1] <- rep (0.00000001, ncol(stock.wt(stk)))
set.seed(1919)
fit <- eqsr_fit(stk,nsamp=1000,models=c(paste0(model)))
#  setwd("~/Documents/IPMA/SARDINE/ADVICE_MP/BRPRevision")
## -- plot of S-R fit
png(paste0('fit',model,range(stk)["minyear"],'-',range(stk)["maxyear"],'.png'))
eqsr_plot(fit)
text(fit$rby$ssb,fit$rby$rec, labels=fit$rby$year,cex= 0.5,pos=3)
title(sub=paste0(title))
dev.off()
return(fit)
}
fit2020Comb <- f.fit(stk,c("Bevholt","Ricker","Segreg"),"Weigthed combination")
fit2020Segreg <- f.fit(stk,c("Segreg"),"Hockey-stick")
fit2020Comb2 <- f.fit(stk2,c("Bevholt","Ricker","Segreg"),"Weigthed combination")
fit2020Segreg2 <- f.fit(stk2,c("Segreg"),"Hockey-stick")
BlimCI <- paste0(round(quantile(fit2020Segreg$sr.sto$b,0.025),0),' - ',round(quantile(fit2020Segreg$sr.sto$b,0.975),0))
Blim <- fit2020Segreg$sr.det$b
Blim
BlimCI
fit2020Segreg$sr.det
Blim2 <- fit2020Segreg2$sr.det$b
Blim2CI <- paste0(round(quantile(fit2020Segreg2$sr.sto$b,0.025),0),' - ',round(quantile(fit2020Segreg2$sr.sto$b,0.975),0))
Blim2
fit2020Segreg2$sr.det
Blim2CI
fit2020Comb <- f.fit(stk,c("Bevholt","Ricker","Segreg"),"Weigthed combination")
fit2020Comb2 <- f.fit(stk2,c("Bevholt","Ricker","Segreg"),"Weigthed combination")
SR <- as.FLSR(pil.stock)
newssb <- FLQuant(seq(0, max(SR@ssb), length.out=20000))
model(SR) <- segreg()
#params for sr low regime
yrs.srlow <- 2006:2020
params_low <- fmle(window(SR, start=2006, end=2020), fixed=list(b=196334))@params
pilsr <- fmle(SR, fixed=list(a=c(params_low)[1],b=196334))
segrec <- predict(pilsr, ssb = newssb)
residsd_low <- sqrt(var(log(exp(residuals(pilsr)[,ac(yrs.srlow)])),na.rm=T))
res <- exp(rnorm(20000, 0, residsd_low))
plot(pilsr[,ac(2006:2020)])
round(residsd_low,3)
dat1 <- data.frame(
ssb=seq(0, max(SR@ssb), length.out=20000),
rec=c(segrec),
low=c(segrec)*qlnorm(0.025, 0, residsd_low),
up=c(segrec)*qlnorm(0.975, 0, residsd_low),
regime="Low")
ggplot(dat1, aes(ssb, rec))+
geom_line(lwd=1)+
geom_ribbon(aes(ssb, ymin=low, ymax=up), alpha=0.3, linetype="dashed")+
xlab("Spawning stock biomass")+
ylab("Recruits (billion)")+
geom_point(data=data.frame(ssb=c(ssb(pil.stock)), rec=c(rec(pil.stock)), year=dimnames(pil.stock)$year), aes(ssb, rec), inherit.aes = F)+
geom_text(data=data.frame(ssb=c(ssb(pil.stock)), rec=c(rec(pil.stock)), year=dimnames(pil.stock)$year), aes(ssb, rec,label=year), inherit.aes = F,vjust=-0.3,size=2)
dat1 <- data.frame(
ssb=seq(0, max(SR@ssb), length.out=20000),
rec=c(segrec/1000000),
low=c(segrec)*qlnorm(0.025, 0, residsd_low),
up=c(segrec)*qlnorm(0.975, 0, residsd_low),
regime="Low")
ggplot(dat1, aes(ssb, rec))+
geom_line(lwd=1)+
geom_ribbon(aes(ssb, ymin=low, ymax=up), alpha=0.3, linetype="dashed")+
xlab("Spawning stock biomass")+
ylab("Recruits (billion)")+
geom_point(data=data.frame(ssb=c(ssb(pil.stock)), rec=c(rec(pil.stock)/1000000), year=dimnames(pil.stock)$year), aes(ssb, rec), inherit.aes = F)+
geom_text(data=data.frame(ssb=c(ssb(pil.stock)), rec=c(rec(pil.stock)/1000000), year=dimnames(pil.stock)$year), aes(ssb, rec,label=year), inherit.aes = F,vjust=-0.3,size=2)
ggplot(dat1, aes(ssb, rec))+
geom_line(lwd=1)+
geom_ribbon(aes(ssb, ymin=low, ymax=up), alpha=0.3, linetype="dashed")+
xlab("Spawning stock biomass")+
ylab("Recruits (billion)")+
geom_point(data=data.frame(ssb=c(ssb(pil.stock)), rec=c(rec(pil.stock)/1000000), year=dimnames(pil.stock)$year), aes(ssb, rec/1000000), inherit.aes = F)+
geom_text(data=data.frame(ssb=c(ssb(pil.stock)), rec=c(rec(pil.stock)/1000000), year=dimnames(pil.stock)$year), aes(ssb, rec/1000000,label=year), inherit.aes = F,vjust=-0.3,size=2)
ggplot(dat1, aes(ssb, rec))+
geom_line(lwd=1)+
geom_ribbon(aes(ssb, ymin=low, ymax=up), alpha=0.3, linetype="dashed")+
xlab("Spawning stock biomass")+
ylab("Recruits (billion)")+
geom_point(data=data.frame(ssb=c(ssb(pil.stock)), rec=c(rec(pil.stock)/1000000), year=dimnames(pil.stock)$year), aes(ssb, rec), inherit.aes = F)+
geom_text(data=data.frame(ssb=c(ssb(pil.stock)), rec=c(rec(pil.stock)/1000000), year=dimnames(pil.stock)$year), aes(ssb, rec,label=year), inherit.aes = F,vjust=-0.3,size=2)
dat1 <- data.frame(
ssb=seq(0, max(SR@ssb), length.out=20000),
rec=c(segrec/1000000),
low=c(segrec/1000000)*qlnorm(0.025, 0, residsd_low),
up=c(segrec/1000000)*qlnorm(0.975, 0, residsd_low),
regime="Low")
ggplot(dat1, aes(ssb, rec))+
geom_line(lwd=1)+
geom_ribbon(aes(ssb, ymin=low, ymax=up), alpha=0.3, linetype="dashed")+
xlab("Spawning stock biomass")+
ylab("Recruits (billion)")+
geom_point(data=data.frame(ssb=c(ssb(pil.stock)), rec=c(rec(pil.stock)/1000000), year=dimnames(pil.stock)$year), aes(ssb, rec), inherit.aes = F)+
geom_text(data=data.frame(ssb=c(ssb(pil.stock)), rec=c(rec(pil.stock)/1000000), year=dimnames(pil.stock)$year), aes(ssb, rec,label=year), inherit.aes = F,vjust=-0.3,size=2)
getwd()
ggsave("SRR2006-2020.png")
# directory with data
res.dir  <- file.path("./data")
srv <- read.table(paste0(res.dir,"/surveysData.csv"), header = TRUE,sep=",")
wd <- "D:/ICES/IBPIS2021"
setwd(wd)
# directory with data
res.dir  <- file.path("./data")
srv <- read.table(paste0(res.dir,"/surveysData.csv"), header = TRUE,sep=",")
subset(srv, survey2=="JUVESAR")
subset(srv, survey2=="JUVESAR" & year==2014)
rm(list=ls())
#==============================================================================
# WORKING DIRECTORY                                                        ----
#==============================================================================
setwd('D:/ICES/IBPIS2021/SS_runs/Setupa')
load("pil.stock.RData")
#==============================================================================
# LOAD LIBRARIES                                                           ----
#==============================================================================
library(FLCore)
library(msy)
#==============================================================================
# Estimate Reference points                                                ----
#==============================================================================
pil <- pil.stock
mat(pil) <- c(0,1,1,1,1,1,1)
#Calculate for the Short Series with fixed Blim
### Get Blim and Bloss
stk <- window(pil, start=2006, end=2020)
# set age0 stock.wt close to 0 needed to get things running
stock.wt(stk)[1] <- rep (0.00000001, ncol(stock.wt(stk)))
stk2 <- window(pil, start=1993, end=2020)
f.fit <- function(stk,model,title){
# set age0 stock.wt close to 0 needed to get things running
stock.wt(stk)[1] <- rep (0.00000001, ncol(stock.wt(stk)))
set.seed(1919)
fit <- eqsr_fit(stk,nsamp=1000,models=c(paste0(model)))
#  setwd("~/Documents/IPMA/SARDINE/ADVICE_MP/BRPRevision")
## -- plot of S-R fit
png(paste0('fit',model,range(stk)["minyear"],'-',range(stk)["maxyear"],'.png'))
eqsr_plot(fit)
text(fit$rby$ssb,fit$rby$rec, labels=fit$rby$year,cex= 0.5,pos=3)
title(sub=paste0(title))
dev.off()
return(fit)
}
fit2020Comb <- f.fit(stk,c("Bevholt","Ricker","Segreg"),"Weigthed combination")
fit2020Segreg <- f.fit(stk,c("Segreg"),"Hockey-stick")
Blim <- fit2020Segreg$sr.det$b
BlimCI <- paste0(round(quantile(fit2020Segreg$sr.sto$b,0.025),0),' - ',round(quantile(fit2020Segreg$sr.sto$b,0.975),0))
fit2020Comb2 <- f.fit(stk2,c("Bevholt","Ricker","Segreg"),"Weigthed combination")
fit2020Segreg2 <- f.fit(stk2,c("Segreg"),"Hockey-stick")
Blim2 <- fit2020Segreg2$sr.det$b
Blim2CI <- paste0(round(quantile(fit2020Segreg2$sr.sto$b,0.025),0),' - ',round(quantile(fit2020Segreg2$sr.sto$b,0.975),0))
# Segmented regression for low productivity scenario (inflexion point at Blim from WKSARMP 2019)
SR <- as.FLSR(pil.stock)
newssb <- FLQuant(seq(0, max(SR@ssb), length.out=20000))
model(SR) <- segreg()
#params for sr low regime
yrs.srlow <- 2006:2020
params_low <- fmle(window(SR, start=2006, end=2020), fixed=list(b=196334))@params
pilsr <- fmle(SR, fixed=list(a=c(params_low)[1],b=196334))
segrec <- predict(pilsr, ssb = newssb)
residsd_low <- sqrt(var(log(exp(residuals(pilsr)[,ac(yrs.srlow)])),na.rm=T))
res <- exp(rnorm(20000, 0, residsd_low))
plot(pilsr[,ac(2006:2020)])
round(residsd_low,3)
dat1 <- data.frame(
ssb=seq(0, max(SR@ssb), length.out=20000),
rec=c(segrec/1000000),
low=c(segrec/1000000)*qlnorm(0.025, 0, residsd_low),
up=c(segrec/1000000)*qlnorm(0.975, 0, residsd_low),
regime="Low")
ggplot(dat1, aes(ssb, rec))+
geom_line(lwd=1)+
geom_ribbon(aes(ssb, ymin=low, ymax=up), alpha=0.3, linetype="dashed")+
xlab("Spawning stock biomass")+
ylab("Recruits (billion)")+
geom_point(data=data.frame(ssb=c(ssb(pil.stock)), rec=c(rec(pil.stock)/1000000), year=dimnames(pil.stock)$year), aes(ssb, rec), inherit.aes = F)+
geom_text(data=data.frame(ssb=c(ssb(pil.stock)), rec=c(rec(pil.stock)/1000000), year=dimnames(pil.stock)$year), aes(ssb, rec,label=year), inherit.aes = F,vjust=-0.3,size=2)
ggsave("SRR2006-2020.png")
noSims <- 1000
SR
pilsr
c(params_low)[1]
### Create EQSIM SRR fits
FIT_segregBlim <- eqsr_fit(stk,nsamp=noSims, models = "pilsr")
set.seed(1919)
eqsim_run (pilsr, # choose SR-fit
bio.years = c(2014, 2019), # years to generate noise in mat,M and wi
bio.const = FALSE,  # average maturity used (TRUE)
sel.years = c(2014, 2019), # noise in selection at age
sel.const = FALSE, # average selection used (TRUE)
Fscan = seq(0, 2, by = 0.01), # range of F values tested
Blim = Blim , # set BRP?s
Bpa = Bpa, # set BRP?s
Nrun = 200)
Blim
str(pilsr)
SegregBlim  <- function(ab, ssb) log(ifelse(ssb >= Blim_fixed, ab$a * Blim_fixed, ab$a * ssb))
SegregBlim
a=c(params_low)[1]
SegregBlim  <- function(ab, ssb) log(ifelse(ssb >= Blim_fixed, a * Blim_fixed, a * ssb))
a=c(params_low)[1]
SegregBlim  <- function(a, ssb) log(ifelse(ssb >= Blim_fixed, a * Blim_fixed, a * ssb))
SegregBlim
FIT_segregBlim <- eqsr_fit(stk,nsamp=noSims, models = "SegregBlim")
### Define new stock recruit relationships
## determine segreg model with Blim breakpoint and (roughly) geomean rec above this
Blim_fixed <- 196334
Q
SegregBlim  <- function(a, ssb) log(ifelse(ssb >= Blim_fixed, a * Blim_fixed, a * ssb))
FIT_segregBlim <- eqsr_fit(stk,nsamp=noSims, models = "SegregBlim")
### Define new stock recruit relationships
## determine segreg model with Blim breakpoint and (roughly) geomean rec above this
Blim_fixed <- 196334
Q
### Define new stock recruit relationships
## determine segreg model with Blim breakpoint and (roughly) geomean rec above this
Blim_fixed <- 196334
a=c(params_low)[1]
SegregBlim  <- function(a, ssb) log(ifelse(ssb >= Blim_fixed, a * Blim_fixed, a * ssb))
FIT_segregBlim <- eqsr_fit(stk,nsamp=noSims, models = "SegregBlim")
c(params_low)[1]
c(196334)
SegregBlim  <- function(a, ssb) log(ifelse(ssb >= Blim_fixed, a * Blim_fixed, a * ssb))
FIT_segregBlim <- eqsr_fit(stk,nsamp=noSims, models = "SegregBlim")
stk
str(fit2020Segreg)
str(pilsr)
segrec
set.seed(1919)
sim_06_20_fixedBlim <- eqsim_run (pilsr, # choose SR-fit
bio.years = c(2014, 2019), # years to generate noise in mat,M and wi
bio.const = FALSE,  # average maturity used (TRUE)
sel.years = c(2014, 2019), # noise in selection at age
sel.const = FALSE, # average selection used (TRUE)
Fscan = seq(0, 2, by = 0.01), # range of F values tested
Blim = Blim_fixed , # set BRP?s
Bpa = 252523, # set BRP?s
Nrun = 1000)
### Define new stock recruit relationships
## determine segreg model with Blim breakpoint and (roughly) geomean rec above this
Blim_fixed <- c(196334)
a=c(params_low)[1]
SegregBlim  <- function(ssb) log(ifelse(ssb >= Blim_fixed, a * Blim_fixed, a * ssb))
eqsr_fit(stk=stk,models="SegregBlim")
SegregBlim  <- function(ab,ssb) log(ifelse(ssb >= Blim_fixed, ab$a * Blim_fixed, ab$a * ssb))
FIT_segregBlim <- eqsr_fit(stk,nsamp=noSims, models = "SegregBlim")
FIT_segregBlim
c(params_low)[1]
FIT_segregBlim <- eqsr_fit(stk,nsamp=noSims, models = "SegregBlim")
set.seed(1919)
sim_06_20_fixedBlim <- eqsim_run (pilsr, # choose SR-fit
bio.years = c(2014, 2019), # years to generate noise in mat,M and wi
bio.const = FALSE,  # average maturity used (TRUE)
sel.years = c(2014, 2019), # noise in selection at age
sel.const = FALSE, # average selection used (TRUE)
Fscan = seq(0, 2, by = 0.01), # range of F values tested
Blim = Blim_fixed , # set BRP?s
Bpa = 252523, # set BRP?s
Nrun = 1000)
sim_06_20_fixedBlim <- eqsim_run (FIT_segregBlim, # choose SR-fit
bio.years = c(2014, 2019), # years to generate noise in mat,M and wi
bio.const = FALSE,  # average maturity used (TRUE)
sel.years = c(2014, 2019), # noise in selection at age
sel.const = FALSE, # average selection used (TRUE)
Fscan = seq(0, 2, by = 0.01), # range of F values tested
Blim = Blim_fixed , # set BRP?s
Bpa = 252523, # set BRP?s
Nrun = 1000)
set.seed(1919)
sim_06_20_fixedBlim <- eqsim_run (FIT_segregBlim, # choose SR-fit
bio.years = c(2014, 2019), # years to generate noise in mat,M and wi
bio.const = FALSE,  # average maturity used (TRUE)
sel.years = c(2014, 2019), # noise in selection at age
sel.const = FALSE, # average selection used (TRUE)
Fscan = seq(0, 2, by = 0.01), # range of F values tested
Blim = Blim_fixed , # set BRP?s
Bpa = 252523, # set BRP?s
Nrun = 200)
sim_06_20_fixedBlim$Refs
t(sim_06_20_fixedBlim$Refs)
runa <- SS_output(dir = getwd(),forecast=FALSE,ncols=62,verbose = TRUE, printstats = TRUE)
runa$derived_quants
1.18148e-02
### Run EQSIM with the FIT_segregBlim
sigmaB <- 0.138
sim_06_20_cv <- eqsim_run (FIT_segregBlim, # choose SR-fit
bio.years = c(2014, 2019), # years to generate noise in mat,M and wi
bio.const = FALSE,  # average maturity used (TRUE)
sel.years = c(2014, 2019), # noise in selection at age
sel.const = FALSE, # average selection used (TRUE)
Fscan = seq(0, 2, by = 0.01), # range of F values tested
Blim = Blim_fixed , # set BRP?s
Bpa = 252523, # set BRP?s
Nrun = 150,
Fcv = 1.18148e-02 , # F CV assessment error last year
Fphi = 0.423 , # autocorrelation in F assessment error; default value
SSBcv = sigmaB)
set.seed(1919)
sim_06_20_trigger <- eqsim_run (fSegregShort, # choose SR-fit
bio.years = c(2014, 2019), # years to generate noise in mat,M and wi
bio.const = FALSE,  # average maturity used (TRUE)
sel.years = c(2014, 2019), # noise in selection at age
sel.const = FALSE, # average selection used (TRUE)
Fscan = seq(0, 2, by = 0.01), # range of F values tested
Blim = Blim_fixed , # set BRP?s
Bpa = 252523, # set BRP?s
Nrun = 150,
Fcv = 1.18148e-02, # F CV assessment error last year
Fphi = 0.423 , # autocorrelation in F assessment error; default value
SSBcv = sigmaB,
Btrigger = 252523 # apply HCR (to check precautionarity)
)
sim_06_20_trigger <- eqsim_run (FIT_segregBlim, # choose SR-fit
bio.years = c(2014, 2019), # years to generate noise in mat,M and wi
bio.const = FALSE,  # average maturity used (TRUE)
sel.years = c(2014, 2019), # noise in selection at age
sel.const = FALSE, # average selection used (TRUE)
Fscan = seq(0, 2, by = 0.01), # range of F values tested
Blim = Blim_fixed , # set BRP?s
Bpa = 252523, # set BRP?s
Nrun = 150,
Fcv = 1.18148e-02, # F CV assessment error last year
Fphi = 0.423 , # autocorrelation in F assessment error; default value
SSBcv = sigmaB,
Btrigger = 252523 # apply HCR (to check precautionarity)
)
t(sim_06_20_trigger$Refs2)
t(sim_06_20_trigger$Refs)
plot(sim_06_20_trigger)
eqsim_plot(sim_06_20_trigger,catch=TRUE)
eqsim_plot_range(sim_06_20_trigger, type="mean")
setwd("D:/IPMA/SARDINE/CAS/2020/regimeProductividade")
load("pil.stock.RData")
mat(pil) <- c(0,1,1,1,1,1,1)
#Calculate for the Short Series with fixed Blim
### Get Blim and Bloss
stk <- window(pil, start=2006, end=2019)
# set age0 stock.wt close to 0 needed to get things running
stock.wt(stk)[1] <- rep (0.00000001, ncol(stock.wt(stk)))
Blim <- 196334
Bpa <- 252523
Bloss <- min(ssb(stk))
sigmaB <- 0.153
### Define new stock recruit relationships
## determine segreg model with Blim breakpoint and (roughly) geomean rec above this
SegregBlim  <- function(ab, ssb) log(ifelse(ssb >= Blim, ab$a * Blim, ab$a * ssb))
## determine segreg model with Bloss breakpoint and (roughly) geomean rec above this
SegregBloss  <- function(ab, ssb) log(ifelse(ssb >= Bloss, ab$a * Bloss, ab$a * ssb))
noSims <- 1000
### Create EQSIM SRR fits
FIT_segregBlim <- eqsr_fit(stk,nsamp=noSims, models = "SegregBlim")
FIT_segregBloss <- eqsr_fit(stk,nsamp=noSims, models = "SegregBloss")
set.seed(1919)
sim_06_19_fixedBlim <- eqsim_run (FIT_segregBlim, # choose SR-fit
bio.years = c(2014, 2019), # years to generate noise in mat,M and wi
bio.const = FALSE,  # average maturity used (TRUE)
sel.years = c(2014, 2019), # noise in selection at age
sel.const = FALSE, # average selection used (TRUE)
Fscan = seq(0, 2, by = 0.01), # range of F values tested
Blim = Blim , # set BRP?s
Bpa = Bpa, # set BRP?s
Nrun = 200)
set.seed(1919)
sim_06_19_cv_fixedBlim <- eqsim_run (FIT_segregBlim, # choose SR-fit
bio.years = c(2014, 2019), # years to generate noise in mat,M and wi
bio.const = FALSE,  # average maturity used (TRUE)
sel.years = c(2014, 2019), # noise in selection at age
sel.const = FALSE, # average selection used (TRUE)
Fscan = seq(0, 2, by = 0.01), # range of F values tested
Blim = Blim , # set BRP?s
Bpa = Bpa, # set BRP?s
Nrun = 200,
Fcv = 0.058 , # F CV assessment error last year
Fphi = 0.423 , # autocorrelation in F assessment error; default value
SSBcv = sigmaB)
set.seed(1919)
sim_06_19_trigger_fixedBlim <- eqsim_run (FIT_segregBlim, # choose SR-fit
bio.years = c(2014, 2019), # years to generate noise in mat,M and wi
bio.const = FALSE,  # average maturity used (TRUE)
sel.years = c(2014, 2019), # noise in selection at age
sel.const = FALSE, # average selection used (TRUE)
Fscan = seq(0, 2, by = 0.01), # range of F values tested
Blim = Blim , # set BRP?s
Bpa = Bpa, # set BRP?s
Nrun = 200,
Fcv = 0.058 , # F CV assessment error last year
Fphi = 0.423 , # autocorrelation in F assessment error; default value
SSBcv = sigmaB,
Btrigger = Bpa # apply HCR (to check precautionarity)
)
sim_06_19_trigger_fixedBlim$Refs
t(sim_06_19_trigger_fixedBlim$Refs)
setwd('D:/ICES/IBPIS2021/SS_runs/Setupa')
load("pil.stock.RData")
mat(pil) <- c(0,1,1,1,1,1,1)
#Calculate for the Short Series with fixed Blim
### Get Blim and Bloss
stk <- window(pil, start=2006, end=2020)
# set age0 stock.wt close to 0 needed to get things running
stock.wt(stk)[1] <- rep (0.00000001, ncol(stock.wt(stk)))
Blim <- 196334
rm(pil)
rm(pil.stock)
setwd('D:/ICES/IBPIS2021/SS_runs/Setupa')
load("pil.stock.RData")
pil <- pil.stock
mat(pil) <- c(0,1,1,1,1,1,1)
#Calculate for the Short Series with fixed Blim
### Get Blim and Bloss
stk <- window(pil, start=2006, end=2020)
# set age0 stock.wt close to 0 needed to get things running
stock.wt(stk)[1] <- rep (0.00000001, ncol(stock.wt(stk)))
### Define new stock recruit relationships
## determine segreg model with Blim breakpoint and (roughly) geomean rec above this
SegregBlim  <- function(ab, ssb) log(ifelse(ssb >= Blim, ab$a * Blim, ab$a * ssb))
noSims <- 1000
### Create EQSIM SRR fits
FIT_segreg2020 <- eqsr_fit(stk,nsamp=noSims, models = "SegregBlim")
### Create EQSIM SRR fits
FIT_segreg2020 <- eqsr_fit(stk,nsamp=noSims, models = "SegregBlim")
### Run EQSIM with the FIT_segregBlim
set.seed(1919)
sim_06_20_fixedBlim <- eqsim_run (FIT_segreg2020, # choose SR-fit
bio.years = c(2014, 2019), # years to generate noise in mat,M and wi
bio.const = FALSE,  # average maturity used (TRUE)
sel.years = c(2014, 2019), # noise in selection at age
sel.const = FALSE, # average selection used (TRUE)
Fscan = seq(0, 2, by = 0.01), # range of F values tested
Blim = Blim , # set BRP?s
Bpa = Bpa, # set BRP?s
Nrun = 200)
set.seed(1919)
sim_06_20_cv_fixedBlim <- eqsim_run (FIT_segreg2020, # choose SR-fit
bio.years = c(2014, 2019), # years to generate noise in mat,M and wi
bio.const = FALSE,  # average maturity used (TRUE)
sel.years = c(2014, 2019), # noise in selection at age
sel.const = FALSE, # average selection used (TRUE)
Fscan = seq(0, 2, by = 0.01), # range of F values tested
Blim = Blim , # set BRP?s
Bpa = Bpa, # set BRP?s
Nrun = 200,
Fcv = 0.058 , # F CV assessment error last year
Fphi = 0.423 , # autocorrelation in F assessment error; default value
SSBcv = sigmaB)
set.seed(1919)
sim_06_20_trigger_fixedBlim <- eqsim_run (FIT_segreg2020, # choose SR-fit
bio.years = c(2014, 2019), # years to generate noise in mat,M and wi
bio.const = FALSE,  # average maturity used (TRUE)
sel.years = c(2014, 2019), # noise in selection at age
sel.const = FALSE, # average selection used (TRUE)
Fscan = seq(0, 2, by = 0.01), # range of F values tested
Blim = Blim , # set BRP?s
Bpa = Bpa, # set BRP?s
Nrun = 200,
Fcv = 0.058 , # F CV assessment error last year
Fphi = 0.423 , # autocorrelation in F assessment error; default value
SSBcv = sigmaB,
Btrigger = Bpa # apply HCR (to check precautionarity)
)
sim_06_19_trigger_fixedBlim$refs_interval
sim_06_20_trigger$refs_interval
sim_06_20_trigger_fixedBlim$refs_interval
sim_06_20_cv_fixedBlim$refs_interval
sim_06_19_cv_fixedBlim$refs_interval
sim_06_19_cv_fixedBlim$Refs
t(sim_06_19_cv_fixedBlim$Refs)
t(sim_06_20_cv_fixedBlim$Refs)
t(sim_06_19_fixedBlim$Refs)
t(sim_06_20_fixedBlim$Refs)
t(sim_06_19_cv_fixedBlim$Refs)
t(sim_06_20_cv_fixedBlim$Refs)
sim_06_19_trigger_fixedBlim$refs_interval
t(sim_06_19_trigger_fixedBlim$Refs)
t(sim_06_20_trigger_fixedBlim$Refs)
rec(pil)
