stf_results[scenario,2] <- mean(harvest(pil.stock_fwd)[ac(2:5),ac(final_year)])
stf_results[scenario,3] <- catch(pil.stock_fwd)[,ac(final_year)]   # Interim year catch stf year
stf_results[scenario,4] <- stock(pil.stock_fwd)[,ac(final_year+1)] # 1st stf year B1+
#stf_results[scenario,5] <- fbar_status_quo # f status quo
#stf_results[scenario,6] <- fbar_multiplier[scenario] # F_multiplier
stf_results[scenario,5] <- fbar_scenarios[scenario,1]
stf_results[scenario,6] <- catch(pil.stock_fwd)[,ac(final_year+1)] # 1st stf year catch
stf_results[scenario,7] <- stock(pil.stock_fwd)[,ac(final_year+2)] # 2nd stf year B1+
stf_results[scenario,8] <- catch(pil.stock_fwd)[,ac(final_year+2)] # 2nd stf year Catch
# Change in SSB and Catch
stf_results[scenario,9] <- (stock(pil.stock_fwd)[,ac(final_year+2)]-stock(pil.stock_fwd)[,ac(final_year+1)])/stock(pil.stock_fwd)[,ac(final_year+1)]*100 # change in B1+ in last two stf years
stf_results[scenario,10] <- (catch(pil.stock_fwd)[,ac(final_year+1)]-catch(pil.stock_fwd)[,ac(final_year-1)])/catch(pil.stock_fwd)[,ac(final_year-1)]*100 # change in catch from true year, to 2nd to last stf year
}
# export this if necessary
write.csv(stf_results,file="STF.csv",row.names=F)
#Change according to the STF!!!
stf_results <- as.data.frame(stf_results)
stf_results$endyr_rec <- as.numeric(rec(pil[,ac(endyr)]))
stf_results$georec <- mean_rec
stf_results$retro <- "retro-3"
xx3 <- stf_results[1,]
save(xx3,file="Take2_retro-3.RData")
rm(list=ls())
wd <- "D:/ICES/IBPIS2021"
setwd(wd)
# directory with SS runs
res.ss <- file.path("./SS_runs")
#set working directory
stf.dir <- paste0(res.ss,"/SetupaSDQTune2/retrospectives/retro-4")
setwd(stf.dir)
# Load stock FLR object
load("pil.stock.RData")
pil <- pil.stock
#Define the assessment/interim year
ass.yr <- endyr <- as.numeric(pil.stock@range[5])
# Change the assumption of recruitment for the interim year according to the stock annex
# 'Recruitment in the interim year and forecast year will be set equal to the geometric mean of the last five years'
# that's for the period (endyr-5):(endyr-1)
stock.n(pil.stock)[1,ac(endyr)] <- exp(mean(log(rec(pil.stock)[,ac((endyr-5):(endyr-1))])))
# Do a 1 year forecast
pil.stock_stf <- stf(pil.stock, nyears = 2, wts.nyears=1)
# Now the stock goes up to endyr+1
summary(pil.stock_stf)
harvest(pil.stock_stf)[,ac((endyr):(endyr+1))] <- harvest(pil.stock_stf)[,ac(endyr-1)]
landings(pil.stock_stf)[,ac((endyr):(endyr+1))] <- NA
landings.n(pil.stock_stf)[,ac((endyr):(endyr+1))] <- 1.0
catch(pil.stock_stf)[,ac((endyr):(endyr+1))] <- NA
#---------------------------------------------------------------
# The stock-recruitment relationship (SRR)
#---------------------------------------------------------------
# A STF does not use a SRR
# Instead it assumes that recruitment in the future is the mean of the last X years
# However, we still need to pass the projection a SRR that contains the mean value
# For the pil278c9a stock we use the mean of the last 5 years
mean_rec <- exp(mean(log(rec(pil.stock)[,ac((endyr-5):(endyr-1))])))
# set up an FLSR object with a geometric mean model
pil.stock_sr <- as.FLSR(pil.stock, model="geomean")
params(pil.stock_sr)['a',] <- mean_rec
#---------------------------------------------------------------
# update the interim year with the assumed catch
#---------------------------------------------------------------
# Adjust the F in the interim year.
# To do so run STF for the interim year, only one year forward,
# restricted by the assumed catches in the interim year
catch_endyr <- as.numeric(catch(pil.stock[,ac(endyr)]))
fbar_old <- fbar(pil.stock[,ac(endyr)])
# Project in the interim year
ctrl_target <- data.frame(year = endyr, quantity = "catch", val = catch_endyr)
# Set the control object - year, quantity and value for the moment
ctrl_f <- FLash::fwdControl(ctrl_target)
pil.stock_stf <- fwd(pil.stock_stf, ctrl = ctrl_f, sr = pil.stock_sr)
fbar_new <- fbar(pil.stock_stf[,ac(endyr)])
#---------------------------------------------------------------
# compute the interim year with the assumed catch
#---------------------------------------------------------------
# Set Fsqtatus quo equal to the mean of the last 3 years in the assessment
fbar_status_quo<-mean(fbar(pil.stock[,ac((endyr-3):(endyr-1))]))
#---------------------------------------------------------------
# Short term forecast with many F scenarios
#---------------------------------------------------------------
# Typically when running STF you explore several different future F scenarios
# We are going to run several F scenarios for the STF
# The scenarios are based on 'F status quo', which we calculated above as the mean F of the last 3 years
# For a 2 year STF the F pattern is:
# year 1: fbar_status_quo* fbar_multiplier
# year 2: fbar_status_quo * fbar_multiplier
# The fbar_multiplier is the same for years 1 and 2
# We are going to run several STFs with different values for the fbar_multiplier
# The fbar_multiplier ranges from 0.1 to 2 by 0.1
fbar_multiplier <- seq(from = 0, to = 2, by = 0.1)
#or just select the Fbar scenarios you want
# As we already have the projection for the interim year, we use the multiplier already in the first projection year
fbar_scenarios <- cbind(c(0,0.032,0.064,0.118,0.156,as.numeric(fbar(pil.stock_stf)[,ac(endyr)]),
fbar_multiplier*fbar_status_quo),c(0,0.032,0.064,0.118,0.156,
as.numeric(fbar(pil.stock_stf)[,ac(endyr)]),fbar_multiplier*fbar_status_quo))
colnames(fbar_scenarios) <- c(endyr+1,endyr+2)
# There are various results we want to extract from the STF
# Like predicted Catch, SSB and the relative change in these
# The following is what we calculate in the STECF Med. WG
# Make an empty matrix in which to store the results
stf_results <- matrix(NA,nrow = nrow(fbar_scenarios),ncol = 10)
# Set some column names
final_year <- endyr
colnames(stf_results) <- c(paste('B1+',final_year,sep="_"),
paste0('F',endyr),
paste('Catch',final_year,sep="_"),
paste('B1+',final_year+1,sep="_"),
#'Fsq','Fmult',
'F',
paste('Catch',final_year+1,sep="_"),
paste('B1+',final_year+2,sep="_"),
paste('Catch',final_year+2,sep="_"),
paste('Change_B1+_',final_year+1,'-',final_year+2,'(%)',sep=""),
paste('Change_Catch_',final_year-1,'-',final_year+1,'(%)',sep=""))
head(stf_results)
# Store the resulting FLStock each time
stk_stf <- FLStocks()
# Loop over the scenarios (each row in the fbar_scenarios table)
for (scenario in 1:nrow(fbar_scenarios)) {
cat("Scenario: ", scenario, "\n")
# Make a target object withe F values for that scenario
ctrl_target <- data.frame(year = (endyr+1):(endyr+2),
quantity = "f",
val = fbar_scenarios[scenario,])
# Set the control object - year, quantity and value for the moment
ctrl_f <- fwdControl(ctrl_target)
# ctrl_target
# Run the forward projection. We include an additional argument, maxF.
# By default the value of maxF is 2.0
# Here we increase it to 10.0 so that F is not limited
pil.stock_fwd <- fwd(pil.stock_stf, ctrl = ctrl_f, sr = pil.stock_sr)#, maxF = 10.0)
## Check it has worked - uncomment out to check scenario by scenario
# plot(pil.stock_fwd[,ac(2001:2018)])
# Store the result - if you want to, comment out if unnecessary
#stk_stf[[as.character(scenario)]] <- pil.stock_fwd
# Fill results table
stf_results[scenario,1] <- stock(pil.stock_fwd)[,ac(final_year)]   # Interim year B1+
stf_results[scenario,2] <- mean(harvest(pil.stock_fwd)[ac(2:5),ac(final_year)])
stf_results[scenario,3] <- catch(pil.stock_fwd)[,ac(final_year)]   # Interim year catch stf year
stf_results[scenario,4] <- stock(pil.stock_fwd)[,ac(final_year+1)] # 1st stf year B1+
#stf_results[scenario,5] <- fbar_status_quo # f status quo
#stf_results[scenario,6] <- fbar_multiplier[scenario] # F_multiplier
stf_results[scenario,5] <- fbar_scenarios[scenario,1]
stf_results[scenario,6] <- catch(pil.stock_fwd)[,ac(final_year+1)] # 1st stf year catch
stf_results[scenario,7] <- stock(pil.stock_fwd)[,ac(final_year+2)] # 2nd stf year B1+
stf_results[scenario,8] <- catch(pil.stock_fwd)[,ac(final_year+2)] # 2nd stf year Catch
# Change in SSB and Catch
stf_results[scenario,9] <- (stock(pil.stock_fwd)[,ac(final_year+2)]-stock(pil.stock_fwd)[,ac(final_year+1)])/stock(pil.stock_fwd)[,ac(final_year+1)]*100 # change in B1+ in last two stf years
stf_results[scenario,10] <- (catch(pil.stock_fwd)[,ac(final_year+1)]-catch(pil.stock_fwd)[,ac(final_year-1)])/catch(pil.stock_fwd)[,ac(final_year-1)]*100 # change in catch from true year, to 2nd to last stf year
}
# export this if necessary
write.csv(stf_results,file="STF.csv",row.names=F)
#Change according to the STF!!!
stf_results <- as.data.frame(stf_results)
stf_results$endyr_rec <- as.numeric(rec(pil[,ac(endyr)]))
stf_results$georec <- mean_rec
stf_results$retro <- "retro-4"
xx4 <- stf_results[1,]
save(xx4,file="Take2_retro-4.RData")
rm(list=ls())
wd <- "D:/ICES/IBPIS2021"
setwd(wd)
# directory with SS runs
res.ss <- file.path("./SS_runs")
#set working directory
stf.dir <- paste0(res.ss,"/SetupaSDQTune2/retrospectives/retro-5")
setwd(stf.dir)
# Load stock FLR object
load("pil.stock.RData")
pil <- pil.stock
#Define the assessment/interim year
ass.yr <- endyr <- as.numeric(pil.stock@range[5])
# Change the assumption of recruitment for the interim year according to the stock annex
# 'Recruitment in the interim year and forecast year will be set equal to the geometric mean of the last five years'
# that's for the period (endyr-5):(endyr-1)
stock.n(pil.stock)[1,ac(endyr)] <- exp(mean(log(rec(pil.stock)[,ac((endyr-5):(endyr-1))])))
# Do a 1 year forecast
pil.stock_stf <- stf(pil.stock, nyears = 2, wts.nyears=1)
# Now the stock goes up to endyr+1
summary(pil.stock_stf)
harvest(pil.stock_stf)[,ac((endyr):(endyr+1))] <- harvest(pil.stock_stf)[,ac(endyr-1)]
landings(pil.stock_stf)[,ac((endyr):(endyr+1))] <- NA
landings.n(pil.stock_stf)[,ac((endyr):(endyr+1))] <- 1.0
catch(pil.stock_stf)[,ac((endyr):(endyr+1))] <- NA
#---------------------------------------------------------------
# The stock-recruitment relationship (SRR)
#---------------------------------------------------------------
# A STF does not use a SRR
# Instead it assumes that recruitment in the future is the mean of the last X years
# However, we still need to pass the projection a SRR that contains the mean value
# For the pil278c9a stock we use the mean of the last 5 years
mean_rec <- exp(mean(log(rec(pil.stock)[,ac((endyr-5):(endyr-1))])))
# set up an FLSR object with a geometric mean model
pil.stock_sr <- as.FLSR(pil.stock, model="geomean")
params(pil.stock_sr)['a',] <- mean_rec
#---------------------------------------------------------------
# update the interim year with the assumed catch
#---------------------------------------------------------------
# Adjust the F in the interim year.
# To do so run STF for the interim year, only one year forward,
# restricted by the assumed catches in the interim year
catch_endyr <- as.numeric(catch(pil.stock[,ac(endyr)]))
fbar_old <- fbar(pil.stock[,ac(endyr)])
# Project in the interim year
ctrl_target <- data.frame(year = endyr, quantity = "catch", val = catch_endyr)
# Set the control object - year, quantity and value for the moment
ctrl_f <- FLash::fwdControl(ctrl_target)
pil.stock_stf <- fwd(pil.stock_stf, ctrl = ctrl_f, sr = pil.stock_sr)
fbar_new <- fbar(pil.stock_stf[,ac(endyr)])
#---------------------------------------------------------------
# compute the interim year with the assumed catch
#---------------------------------------------------------------
# Set Fsqtatus quo equal to the mean of the last 3 years in the assessment
fbar_status_quo<-mean(fbar(pil.stock[,ac((endyr-3):(endyr-1))]))
#---------------------------------------------------------------
# Short term forecast with many F scenarios
#---------------------------------------------------------------
# Typically when running STF you explore several different future F scenarios
# We are going to run several F scenarios for the STF
# The scenarios are based on 'F status quo', which we calculated above as the mean F of the last 3 years
# For a 2 year STF the F pattern is:
# year 1: fbar_status_quo* fbar_multiplier
# year 2: fbar_status_quo * fbar_multiplier
# The fbar_multiplier is the same for years 1 and 2
# We are going to run several STFs with different values for the fbar_multiplier
# The fbar_multiplier ranges from 0.1 to 2 by 0.1
fbar_multiplier <- seq(from = 0, to = 2, by = 0.1)
#or just select the Fbar scenarios you want
# As we already have the projection for the interim year, we use the multiplier already in the first projection year
fbar_scenarios <- cbind(c(0,0.032,0.064,0.118,0.156,as.numeric(fbar(pil.stock_stf)[,ac(endyr)]),
fbar_multiplier*fbar_status_quo),c(0,0.032,0.064,0.118,0.156,
as.numeric(fbar(pil.stock_stf)[,ac(endyr)]),fbar_multiplier*fbar_status_quo))
colnames(fbar_scenarios) <- c(endyr+1,endyr+2)
# There are various results we want to extract from the STF
# Like predicted Catch, SSB and the relative change in these
# The following is what we calculate in the STECF Med. WG
# Make an empty matrix in which to store the results
stf_results <- matrix(NA,nrow = nrow(fbar_scenarios),ncol = 10)
# Set some column names
final_year <- endyr
colnames(stf_results) <- c(paste('B1+',final_year,sep="_"),
paste0('F',endyr),
paste('Catch',final_year,sep="_"),
paste('B1+',final_year+1,sep="_"),
#'Fsq','Fmult',
'F',
paste('Catch',final_year+1,sep="_"),
paste('B1+',final_year+2,sep="_"),
paste('Catch',final_year+2,sep="_"),
paste('Change_B1+_',final_year+1,'-',final_year+2,'(%)',sep=""),
paste('Change_Catch_',final_year-1,'-',final_year+1,'(%)',sep=""))
head(stf_results)
# Store the resulting FLStock each time
stk_stf <- FLStocks()
# Loop over the scenarios (each row in the fbar_scenarios table)
for (scenario in 1:nrow(fbar_scenarios)) {
cat("Scenario: ", scenario, "\n")
# Make a target object withe F values for that scenario
ctrl_target <- data.frame(year = (endyr+1):(endyr+2),
quantity = "f",
val = fbar_scenarios[scenario,])
# Set the control object - year, quantity and value for the moment
ctrl_f <- fwdControl(ctrl_target)
# ctrl_target
# Run the forward projection. We include an additional argument, maxF.
# By default the value of maxF is 2.0
# Here we increase it to 10.0 so that F is not limited
pil.stock_fwd <- fwd(pil.stock_stf, ctrl = ctrl_f, sr = pil.stock_sr)#, maxF = 10.0)
## Check it has worked - uncomment out to check scenario by scenario
# plot(pil.stock_fwd[,ac(2001:2018)])
# Store the result - if you want to, comment out if unnecessary
#stk_stf[[as.character(scenario)]] <- pil.stock_fwd
# Fill results table
stf_results[scenario,1] <- stock(pil.stock_fwd)[,ac(final_year)]   # Interim year B1+
stf_results[scenario,2] <- mean(harvest(pil.stock_fwd)[ac(2:5),ac(final_year)])
stf_results[scenario,3] <- catch(pil.stock_fwd)[,ac(final_year)]   # Interim year catch stf year
stf_results[scenario,4] <- stock(pil.stock_fwd)[,ac(final_year+1)] # 1st stf year B1+
#stf_results[scenario,5] <- fbar_status_quo # f status quo
#stf_results[scenario,6] <- fbar_multiplier[scenario] # F_multiplier
stf_results[scenario,5] <- fbar_scenarios[scenario,1]
stf_results[scenario,6] <- catch(pil.stock_fwd)[,ac(final_year+1)] # 1st stf year catch
stf_results[scenario,7] <- stock(pil.stock_fwd)[,ac(final_year+2)] # 2nd stf year B1+
stf_results[scenario,8] <- catch(pil.stock_fwd)[,ac(final_year+2)] # 2nd stf year Catch
# Change in SSB and Catch
stf_results[scenario,9] <- (stock(pil.stock_fwd)[,ac(final_year+2)]-stock(pil.stock_fwd)[,ac(final_year+1)])/stock(pil.stock_fwd)[,ac(final_year+1)]*100 # change in B1+ in last two stf years
stf_results[scenario,10] <- (catch(pil.stock_fwd)[,ac(final_year+1)]-catch(pil.stock_fwd)[,ac(final_year-1)])/catch(pil.stock_fwd)[,ac(final_year-1)]*100 # change in catch from true year, to 2nd to last stf year
}
# export this if necessary
write.csv(stf_results,file="STF.csv",row.names=F)
#Change according to the STF!!!
stf_results <- as.data.frame(stf_results)
stf_results$endyr_rec <- as.numeric(rec(pil[,ac(endyr)]))
stf_results$georec <- mean_rec
stf_results$retro <- "retro-5"
xx5 <- stf_results[1,]
save(xx5,file="Take2_retro-5.RData")
rm(list=ls())
rm(list=ls())
#==============================================================================
# WORKING DIRECTORY                                                        ----
#==============================================================================
wd <- "D:/ICES/IBPIS2021"
setwd(wd)
# directory to save plots
res.plots <- file.path("./plots")
# directory with SS runs
res.ss <- file.path("./SS_runs")
#==============================================================================
# LOAD LIBRARIES                                                           ----
#==============================================================================
library(r4ss)
library(tidyverse)
load("D:/ICES/IBPIS2021/SS_runs/SetupaSDQTune2/retrospectives/retro0/retro-0.RData")
load("D:/ICES/IBPIS2021/SS_runs/SetupaSDQTune2/retrospectives/retro-1/retro-1.RData")
load("D:/ICES/IBPIS2021/SS_runs/SetupaSDQTune2/retrospectives/retro-2/retro-2.RData")
load("D:/ICES/IBPIS2021/SS_runs/SetupaSDQTune2/retrospectives/retro-3/retro-3.RData")
load("D:/ICES/IBPIS2021/SS_runs/SetupaSDQTune2/retrospectives/retro-4/retro-4.RData")
load("D:/ICES/IBPIS2021/SS_runs/SetupaSDQTune2/retrospectives/retro-5/retro-5.RData")
xx0 <- xx0[,c(1,4,11:13)]
names(xx0) <- c("B1y","B1y+1","endyr_rec","georec","retro")
xx1 <- xx1[,c(1,4,11:13)]
names(xx1) <- c("B1y","B1y+1","endyr_rec","georec","retro")
xx2 <- xx2[,c(1,4,11:13)]
names(xx2) <- c("B1y","B1y+1","endyr_rec","georec","retro")
xx3 <- xx3[,c(1,4,11:13)]
names(xx3) <- c("B1y","B1y+1","endyr_rec","georec","retro")
xx4 <- xx4[,c(1,4,11:13)]
names(xx4) <- c("B1y","B1y+1","endyr_rec","georec","retro")
xx5 <- xx5[,c(1,4,11:13)]
names(xx5) <- c("B1y","B1y+1","endyr_rec","georec","retro")
new <- bind_rows(xx0,xx1,xx2,xx3,xx4,xx5)
new$year <- c(2020:2015)
new$stf <- "new"
rm(xx0,xx1,xx2,xx3,xx4,xx5)
load("D:/ICES/IBPIS2021/SS_runs/SetupaSDQTune2/retrospectives/retro0/Take2_retro-0.RData")
load("D:/ICES/IBPIS2021/SS_runs/SetupaSDQTune2/retrospectives/retro-1/Take2_retro-1.RData")
load("D:/ICES/IBPIS2021/SS_runs/SetupaSDQTune2/retrospectives/retro-2/Take2_retro-2.RData")
load("D:/ICES/IBPIS2021/SS_runs/SetupaSDQTune2/retrospectives/retro-3/Take2_retro-3.RData")
load("D:/ICES/IBPIS2021/SS_runs/SetupaSDQTune2/retrospectives/retro-4/Take2_retro-4.RData")
load("D:/ICES/IBPIS2021/SS_runs/SetupaSDQTune2/retrospectives/retro-5/Take2_retro-5.RData")
xx0 <- xx0[,c(1,4,11:13)]
names(xx0) <- c("B1y","B1y+1","endyr_rec","georec","retro")
xx1 <- xx1[,c(1,4,11:13)]
names(xx1) <- c("B1y","B1y+1","endyr_rec","georec","retro")
xx2 <- xx2[,c(1,4,11:13)]
names(xx2) <- c("B1y","B1y+1","endyr_rec","georec","retro")
xx3 <- xx3[,c(1,4,11:13)]
names(xx3) <- c("B1y","B1y+1","endyr_rec","georec","retro")
xx4 <- xx4[,c(1,4,11:13)]
names(xx4) <- c("B1y","B1y+1","endyr_rec","georec","retro")
xx5 <- xx5[,c(1,4,11:13)]
names(xx5) <- c("B1y","B1y+1","endyr_rec","georec","retro")
stf<-bind_rows(old,new)
load("D:/ICES/IBPIS2021/SS_runs/SetupaSDQTune2/retrospectives/retro0/Take2_retro-0.RData")
load("D:/ICES/IBPIS2021/SS_runs/SetupaSDQTune2/retrospectives/retro-1/Take2_retro-1.RData")
load("D:/ICES/IBPIS2021/SS_runs/SetupaSDQTune2/retrospectives/retro-2/Take2_retro-2.RData")
load("D:/ICES/IBPIS2021/SS_runs/SetupaSDQTune2/retrospectives/retro-3/Take2_retro-3.RData")
load("D:/ICES/IBPIS2021/SS_runs/SetupaSDQTune2/retrospectives/retro-4/Take2_retro-4.RData")
load("D:/ICES/IBPIS2021/SS_runs/SetupaSDQTune2/retrospectives/retro-5/Take2_retro-5.RData")
xx0 <- xx0[,c(1,4,11:13)]
names(xx0) <- c("B1y","B1y+1","endyr_rec","georec","retro")
xx1 <- xx1[,c(1,4,11:13)]
names(xx1) <- c("B1y","B1y+1","endyr_rec","georec","retro")
xx2 <- xx2[,c(1,4,11:13)]
names(xx2) <- c("B1y","B1y+1","endyr_rec","georec","retro")
xx3 <- xx3[,c(1,4,11:13)]
names(xx3) <- c("B1y","B1y+1","endyr_rec","georec","retro")
xx4 <- xx4[,c(1,4,11:13)]
names(xx4) <- c("B1y","B1y+1","endyr_rec","georec","retro")
xx5 <- xx5[,c(1,4,11:13)]
names(xx5) <- c("B1y","B1y+1","endyr_rec","georec","retro")
old <- bind_rows(xx0,xx1,xx2,xx3,xx4,xx5)
old$year <- c(2020:2015)
old$stf <- "new"
rm(xx0,xx1,xx2,xx3,xx4,xx5)
stf<-bind_rows(old,new)
rm(old,new)
stf%>%
group_by(stf)%>%
summarise(
rmse_B1=sqrt(mean((lag(B1y)-`B1y+1`)^2,na.rm=T)),
rmse_Rec=sqrt(mean((lag(endyr_rec)-georec)^2,na.rm=T)))
################################################################################
#                      IBPIS 2021 - SS runs                                    #
#------------------------------------------------------------------------------#
#                                                                              #
#   Laura Wise (IPMA)                                                          #
#   created:  19/10/2021                                                       #
#                                                                              #
################################################################################
# Copyright: IPMA, 2021
# Author: Laura Wise (IPMA) (<lwise@ipma.pt>)
#
# Distributed under the terms of the GNU GPLv3
#==============================================================================
#                                                                          ----
#==============================================================================
rm(list=ls())
#==============================================================================
# WORKING DIRECTORY                                                        ----
#==============================================================================
wd <- "D:/ICES/IBPIS2021"
setwd(wd)
# directory to save plots
res.plots <- file.path("./plots")
# directory with SS runs
res.ss <- file.path("./SS_runs")
#==============================================================================
# LOAD LIBRARIES                                                           ----
#==============================================================================
library(r4ss)
library(tidyverse)
load("D:/ICES/IBPIS2021/SS_runs/SetupaSDQTune2/retrospectives/retro0/retro-0.RData")
load("D:/ICES/IBPIS2021/SS_runs/SetupaSDQTune2/retrospectives/retro-1/retro-1.RData")
load("D:/ICES/IBPIS2021/SS_runs/SetupaSDQTune2/retrospectives/retro-2/retro-2.RData")
load("D:/ICES/IBPIS2021/SS_runs/SetupaSDQTune2/retrospectives/retro-3/retro-3.RData")
load("D:/ICES/IBPIS2021/SS_runs/SetupaSDQTune2/retrospectives/retro-4/retro-4.RData")
load("D:/ICES/IBPIS2021/SS_runs/SetupaSDQTune2/retrospectives/retro-5/retro-5.RData")
xx0 <- xx0[,c(1,4,11:13)]
names(xx0) <- c("B1y","B1y+1","endyr_rec","georec","retro")
xx1 <- xx1[,c(1,4,11:13)]
names(xx1) <- c("B1y","B1y+1","endyr_rec","georec","retro")
xx2 <- xx2[,c(1,4,11:13)]
names(xx2) <- c("B1y","B1y+1","endyr_rec","georec","retro")
xx3 <- xx3[,c(1,4,11:13)]
names(xx3) <- c("B1y","B1y+1","endyr_rec","georec","retro")
xx4 <- xx4[,c(1,4,11:13)]
names(xx4) <- c("B1y","B1y+1","endyr_rec","georec","retro")
xx5 <- xx5[,c(1,4,11:13)]
names(xx5) <- c("B1y","B1y+1","endyr_rec","georec","retro")
new <- bind_rows(xx0,xx1,xx2,xx3,xx4,xx5)
new$year <- c(2020:2015)
new$stf <- "new"
rm(xx0,xx1,xx2,xx3,xx4,xx5)
load("D:/ICES/IBPIS2021/SS_runs/SetupaSDQTune2/retrospectives/retro0/Take2_retro-0.RData")
load("D:/ICES/IBPIS2021/SS_runs/SetupaSDQTune2/retrospectives/retro-1/Take2_retro-1.RData")
load("D:/ICES/IBPIS2021/SS_runs/SetupaSDQTune2/retrospectives/retro-2/Take2_retro-2.RData")
load("D:/ICES/IBPIS2021/SS_runs/SetupaSDQTune2/retrospectives/retro-3/Take2_retro-3.RData")
load("D:/ICES/IBPIS2021/SS_runs/SetupaSDQTune2/retrospectives/retro-4/Take2_retro-4.RData")
load("D:/ICES/IBPIS2021/SS_runs/SetupaSDQTune2/retrospectives/retro-5/Take2_retro-5.RData")
xx0 <- xx0[,c(1,4,11:13)]
names(xx0) <- c("B1y","B1y+1","endyr_rec","georec","retro")
xx1 <- xx1[,c(1,4,11:13)]
names(xx1) <- c("B1y","B1y+1","endyr_rec","georec","retro")
xx2 <- xx2[,c(1,4,11:13)]
names(xx2) <- c("B1y","B1y+1","endyr_rec","georec","retro")
xx3 <- xx3[,c(1,4,11:13)]
names(xx3) <- c("B1y","B1y+1","endyr_rec","georec","retro")
xx4 <- xx4[,c(1,4,11:13)]
names(xx4) <- c("B1y","B1y+1","endyr_rec","georec","retro")
xx5 <- xx5[,c(1,4,11:13)]
names(xx5) <- c("B1y","B1y+1","endyr_rec","georec","retro")
old <- bind_rows(xx0,xx1,xx2,xx3,xx4,xx5)
old$year <- c(2020:2015)
old$stf <- "old"
rm(xx0,xx1,xx2,xx3,xx4,xx5)
stf<-bind_rows(old,new)
rm(old,new)
stf%>%
group_by(stf)%>%
summarise(
rmse_B1=sqrt(mean((lag(B1y)-`B1y+1`)^2,na.rm=T)),
rmse_Rec=sqrt(mean((lag(endyr_rec)-georec)^2,na.rm=T)))
stf
dd <- stf%>%
group_by(stf)%>%
summarise(
rmse_B1=sqrt(mean((lag(B1y)-`B1y+1`)^2,na.rm=T)),
rmse_Rec=sqrt(mean((lag(endyr_rec)-georec)^2,na.rm=T)))
dd
as.data.framedd
as.data.frame(dd)
wd <- "D:/ICES/IBPIS2021"
setwd(wd)
# directory to save plots
res.plots <- file.path("./plots")
# directory with SS runs
res.ss <- file.path("./SS_runs")
# directory with data
res.dir  <- file.path("./data")
# The original 2020 assessment model
run2020 <- SS_output(dir = paste0(res.ss,"/2020_Update"),forecast=FALSE,ncols=62,verbose = TRUE, printstats = TRUE)
# The 2020 assessment model with the 2020 DEPM point estimate (was not available at the time)
run2020.DEPM <- SS_output(dir = paste0(res.ss,"/2020_DEPM"),forecast=FALSE,ncols=62,verbose = TRUE, printstats = TRUE)
runaSDTune2 <- SS_output(dir = paste0(res.ss,'/SetupaSDTune2'),forecast=FALSE,ncols=62,verbose = TRUE, printstats = TRUE)
cpl <- list(run2020,run2020.DEPM,runaSDQTune2)
cpl.sum <- SSsummarize(biglist=cpl)
SSplotComparisons(summaryoutput=cpl.sum,xlim=c(1978,2025),print = TRUE,plotdir = res.plots,
legendlabels = c("A2020","D2020","Final"),legendloc = "topright",filenameprefix = "Final")
runaSDQTune2 <- SS_output(dir = paste0(res.ss,'/SetupaSDQTune2'),forecast=FALSE,ncols=62,verbose = TRUE, printstats = TRUE)
cpl <- list(run2020,run2020.DEPM,runaSDQTune2)
cpl.sum <- SSsummarize(biglist=cpl)
SSplotComparisons(summaryoutput=cpl.sum,subplots = c(13),indexfleets = c(2),xlim=c(1978,2020),print = TRUE,plotdir = res.plots,
legendlabels = c("A2020","D2020","Final"),legendloc = "topright",filenameprefix = "Final")
SSplotComparisons(summaryoutput=cpl.sum,subplots = c(13),indexfleets = c(3),xlim=c(1978,2020),print = TRUE,plotdir = res.plots,
legendlabels = c("A2020","D2020","Final"),legendloc = "topright",filenameprefix = "Final")
SSplotComparisons(summaryoutput=cpl.sum,subplots = c(13),indexfleets = c(2),xlim=c(1978,2020),print = TRUE,plotdir = res.plots,
legendlabels = c("A2020","D2020","Final"),legendloc = "topright",filenameprefix = "Final")
SSplotComparisons(summaryoutput=cpl.sum,subplots = c(13),indexfleets = c(3),xlim=c(1978,2020),print = TRUE,plotdir = res.plots,
legendlabels = c("A2020","D2020","Final"),legendloc = "topright",filenameprefix = "Final")
cpl.sum
cpl.sum$SpawnBioSD
cpl.sum$SpawnBio[,c(1:3)]+cpl.sum$SpawnBioSD[,c(1:3)]
cpl.sum$quants
cpl.sum$quants[,2]-cpl.sum$quantsSD[,2]
lowerBDEPM <-cpl.sum$quants[,2]-cpl.sum$quantsSD[,2]
cpl.sum$quants[,3]
quantsFinal <-cpl.sum$quants[,3]
cbind(lowerBDEPM,quantsFinal)
tt <- bind(lowerBDEPM,quantsFinal)
tt <- cbind(lowerBDEPM,quantsFinal)
head(tt)
